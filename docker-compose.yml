version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: eventhouse_postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: regis_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/saas-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - eventhouse_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d regis_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Session Storage (Optional)
  redis:
    image: redis:7-alpine
    container_name: eventhouse_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    networks:
      - eventhouse_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Node.js Application (Development)
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: eventhouse_app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: regis_db
      DB_USER: postgres
      DB_PASSWORD: password123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      EMAIL_HOST: smtp.gmail.com
      EMAIL_PORT: 587
      EMAIL_USER: your-email@gmail.com
      EMAIL_PASS: your-app-password
      UPLOAD_PATH: /app/public/assets
      QR_CODE_PATH: /app/public/assets/qr-codes
    volumes:
      - .:/app
      - /app/node_modules
      - ./public/assets:/app/public/assets
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - eventhouse_network
    command: npm run dev

  # pgAdmin for Database Management (Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: eventhouse_pgadmin
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@eventhouse.idcloudhost.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - eventhouse_network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: eventhouse_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./public:/var/www/html
    depends_on:
      - app
    networks:
      - eventhouse_network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  eventhouse_network:
    driver: bridge

# Development override
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
