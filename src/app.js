const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const rateLimit = require('express-rate-limit');
const path = require('path');
const session = require('express-session');
const pgSession = require('connect-pg-simple')(session);

// Load environment variables
require('dotenv').config();

// Import utilities
const logger = require('./utils/logger');
const db = require('../config/database');

// Import middleware
const { tenantResolver } = require('./middleware/tenantResolver');
const { errorHandler } = require('./middleware/errorHandler');
const { notFoundHandler } = require('./middleware/notFoundHandler');

// Import routes
const healthRoutes = require('./routes/health');
const publicRoutes = require('./routes/public');
const adminRoutes = require('./routes/admin');
const authRoutes = require('./routes/auth');
const apiRoutes = require('./routes/api');

const app = express();
const PORT = process.env.PORT || 3000;

// Trust proxy for production deployment
if (process.env.NODE_ENV === 'production') {
    app.set('trust proxy', 1);
}\n\n// Security middleware\napp.use(helmet({\n    contentSecurityPolicy: {\n        directives: {\n            defaultSrc: [\"'self'\"],\n            styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://cdn.jsdelivr.net\", \"https://fonts.googleapis.com\"],\n            scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"https://cdn.jsdelivr.net\", \"https://js.stripe.com\"],\n            imgSrc: [\"'self'\", \"data:\", \"https:\", \"blob:\"],\n            fontSrc: [\"'self'\", \"https://cdn.jsdelivr.net\", \"https://fonts.gstatic.com\"],\n            connectSrc: [\"'self'\", \"https://api.stripe.com\"]\n        }\n    },\n    crossOriginEmbedderPolicy: false\n}));\n\n// CORS configuration\nconst corsOptions = {\n    origin: (origin, callback) => {\n        // Allow requests with no origin (mobile apps, etc.)\n        if (!origin) return callback(null, true);\n        \n        // In development, allow any origin\n        if (process.env.NODE_ENV === 'development') {\n            return callback(null, true);\n        }\n        \n        // In production, check against allowed origins\n        const allowedOrigins = [\n            process.env.APP_URL,\n            /\\.eventhouse\\.com$/,\n            /\\.herokuapp\\.com$/,\n            /\\.vercel\\.app$/\n        ];\n        \n        const isAllowed = allowedOrigins.some(allowedOrigin => {\n            if (typeof allowedOrigin === 'string') {\n                return origin === allowedOrigin;\n            }\n            return allowedOrigin.test(origin);\n        });\n        \n        callback(isAllowed ? null : new Error('Not allowed by CORS'), isAllowed);\n    },\n    credentials: true,\n    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],\n    allowedHeaders: ['Content-Type', 'Authorization', 'X-Tenant-ID', 'X-Requested-With']\n};\n\napp.use(cors(corsOptions));\n\n// Rate limiting\nconst createRateLimiter = (windowMs, max, message) => rateLimit({\n    windowMs,\n    max,\n    message: { error: message },\n    standardHeaders: true,\n    legacyHeaders: false,\n    skip: (req) => {\n        // Skip rate limiting for health checks\n        return req.path === '/health' || req.path === '/api/health';\n    }\n});\n\n// Different rate limits for different routes\napp.use('/api/auth', createRateLimiter(15 * 60 * 1000, 5, 'Too many authentication attempts, please try again later.'));\napp.use('/api/register', createRateLimiter(15 * 60 * 1000, 10, 'Too many registration attempts, please try again later.'));\napp.use('/api', createRateLimiter(15 * 60 * 1000, 100, 'Too many API requests, please try again later.'));\n\n// Body parsing middleware\napp.use(compression());\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// Session configuration\napp.use(session({\n    store: new pgSession({\n        pool: db.pool,\n        tableName: 'user_sessions'\n    }),\n    secret: process.env.SESSION_SECRET || 'your-session-secret-change-in-production',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n        secure: process.env.NODE_ENV === 'production',\n        httpOnly: true,\n        maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    },\n    name: 'sessionId'\n}));\n\n// Static files\napp.use('/assets', express.static(path.join(__dirname, '../public/assets')));\napp.use('/uploads', express.static(path.join(__dirname, '../uploads')));\n\n// Request logging middleware\napp.use((req, res, next) => {\n    const start = Date.now();\n    \n    res.on('finish', () => {\n        const duration = Date.now() - start;\n        logger.info('HTTP Request', {\n            method: req.method,\n            url: req.originalUrl,\n            status: res.statusCode,\n            duration: `${duration}ms`,\n            ip: req.ip,\n            userAgent: req.get('User-Agent'),\n            tenantId: req.tenant?.id\n        });\n    });\n    \n    next();\n});\n\n// Tenant resolution middleware (for multi-tenant architecture)\napp.use(tenantResolver);\n\n// Health check endpoints\napp.get('/health', async (req, res) => {\n    try {\n        const dbHealth = await db.healthCheck();\n        \n        res.json({\n            status: 'OK',\n            timestamp: new Date().toISOString(),\n            uptime: process.uptime(),\n            environment: process.env.NODE_ENV,\n            version: process.env.npm_package_version || '1.0.0',\n            database: dbHealth,\n            memory: {\n                used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024) + ' MB',\n                total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024) + ' MB'\n            }\n        });\n    } catch (error) {\n        logger.error('Health check failed:', error);\n        res.status(503).json({\n            status: 'ERROR',\n            timestamp: new Date().toISOString(),\n            error: error.message\n        });\n    }\n});\n\n// API Documentation (in development)\nif (process.env.NODE_ENV === 'development') {\n    const swaggerUi = require('swagger-ui-express');\n    const swaggerJsdoc = require('swagger-jsdoc');\n    \n    const options = {\n        definition: {\n            openapi: '3.0.0',\n            info: {\n                title: 'EventHouse by IDCloudHost SaaS API',\n                version: '1.0.0',\n                description: 'Multi-tenant event registration platform with QR code check-in'\n            },\n            servers: [\n                {\n                    url: `http://localhost:${PORT}`,\n                    description: 'Development server'\n                }\n            ]\n        },\n        apis: ['./src/routes/*.js']\n    };\n    \n    const specs = swaggerJsdoc(options);\n    app.use('/api/docs', swaggerUi.serve, swaggerUi.setup(specs));\n}\n\n// API Routes\napp.use('/api/auth', authRoutes);\napp.use('/api/public', publicRoutes);\napp.use('/api/admin', adminRoutes);\napp.use('/api', apiRoutes);\n\n// Serve tenant-specific static pages\napp.get('/', (req, res) => {\n    if (req.tenant) {\n        // Serve tenant-specific landing page\n        res.sendFile(path.join(__dirname, '../public/tenant/index.html'));\n    } else {\n        // Serve main marketing page\n        res.sendFile(path.join(__dirname, '../public/index.html'));\n    }\n});\n\napp.get('/register/:eventSlug?', (req, res) => {\n    if (req.tenant) {\n        res.sendFile(path.join(__dirname, '../public/tenant/register.html'));\n    } else {\n        res.status(404).json({ error: 'Tenant not found' });\n    }\n});\n\napp.get('/admin', (req, res) => {\n    if (req.tenant) {\n        res.redirect('/admin/login');\n    } else {\n        res.status(404).json({ error: 'Tenant not found' });\n    }\n});\n\napp.get('/admin/*', (req, res) => {\n    if (req.tenant) {\n        res.sendFile(path.join(__dirname, '../public/admin/index.html'));\n    } else {\n        res.status(404).json({ error: 'Tenant not found' });\n    }\n});\n\n// 404 handler for API routes\napp.use('/api/*', notFoundHandler);\n\n// Global 404 handler\napp.use('*', (req, res) => {\n    if (req.accepts('html')) {\n        res.status(404).sendFile(path.join(__dirname, '../public/404.html'));\n    } else {\n        res.status(404).json({ error: 'Page not found' });\n    }\n});\n\n// Global error handling middleware\napp.use(errorHandler);\n\n// Graceful shutdown handling\nprocess.on('SIGTERM', gracefulShutdown);\nprocess.on('SIGINT', gracefulShutdown);\n\nfunction gracefulShutdown(signal) {\n    logger.info(`Received ${signal}. Starting graceful shutdown...`);\n    \n    server.close(() => {\n        logger.info('HTTP server closed.');\n        \n        // Close database connections\n        db.close().then(() => {\n            logger.info('Database connections closed.');\n            process.exit(0);\n        }).catch((err) => {\n            logger.error('Error closing database connections:', err);\n            process.exit(1);\n        });\n    });\n    \n    // Force close after 30 seconds\n    setTimeout(() => {\n        logger.error('Could not close connections in time, forcefully shutting down');\n        process.exit(1);\n    }, 30000);\n}\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (reason, promise) => {\n    logger.error('Unhandled Rejection at:', promise, 'reason:', reason);\n    // Don't exit in production, just log the error\n    if (process.env.NODE_ENV !== 'production') {\n        process.exit(1);\n    }\n});\n\n// Handle uncaught exceptions\nprocess.on('uncaughtException', (error) => {\n    logger.error('Uncaught Exception:', error);\n    process.exit(1);\n});\n\n// Start server\nconst server = app.listen(PORT, () => {\n    logger.info(`🚀 EventHouse by IDCloudHost SaaS Server running on port ${PORT}`);\n    logger.info(`📱 Environment: ${process.env.NODE_ENV}`);\n    logger.info(`🌐 Main URL: http://localhost:${PORT}`);\n    logger.info(`👤 Admin Portal: http://localhost:${PORT}/admin`);\n    \n    if (process.env.NODE_ENV === 'development') {\n        logger.info(`📚 API Docs: http://localhost:${PORT}/api/docs`);\n        logger.info(`🏥 Health Check: http://localhost:${PORT}/health`);\n    }\n});\n\nmodule.exports = app;"
