/**\n * Payment Integration JavaScript\n * Supports Midtrans and Xendit payment gateways\n */\n\nclass PaymentManager {\n    constructor() {\n        this.currentProvider = 'midtrans';\n        this.paymentData = null;\n        this.initializeEventListeners();\n    }\n\n    initializeEventListeners() {\n        // Provider selection\n        document.querySelectorAll('input[name=\"paymentProvider\"]').forEach(radio => {\n            radio.addEventListener('change', (e) => {\n                this.currentProvider = e.target.value;\n                this.updatePaymentMethods();\n            });\n        });\n\n        // Payment form submission\n        const paymentForm = document.getElementById('paymentForm');\n        if (paymentForm) {\n            paymentForm.addEventListener('submit', (e) => {\n                e.preventDefault();\n                this.processPayment();\n            });\n        }\n\n        // Plan selection\n        document.querySelectorAll('.plan-card').forEach(card => {\n            card.addEventListener('click', () => {\n                this.selectPlan(card);\n            });\n        });\n\n        // Billing period toggle\n        const billingToggle = document.getElementById('billingPeriod');\n        if (billingToggle) {\n            billingToggle.addEventListener('change', () => {\n                this.updatePricing();\n            });\n        }\n    }\n\n    selectPlan(planCard) {\n        // Remove active class from all cards\n        document.querySelectorAll('.plan-card').forEach(card => {\n            card.classList.remove('active', 'border-primary');\n        });\n\n        // Add active class to selected card\n        planCard.classList.add('active', 'border-primary');\n\n        // Get plan data\n        const planId = planCard.dataset.planId;\n        const planName = planCard.dataset.planName;\n        const planPrice = planCard.dataset.planPrice;\n\n        // Update hidden form fields\n        document.getElementById('selectedPlanId').value = planId;\n        document.getElementById('selectedPlanName').value = planName;\n        document.getElementById('selectedPlanPrice').value = planPrice;\n\n        // Show payment form\n        document.getElementById('paymentSection').classList.remove('d-none');\n        \n        this.updatePricing();\n    }\n\n    updatePricing() {\n        const billingPeriod = document.getElementById('billingPeriod')?.checked ? 'yearly' : 'monthly';\n        const planPrice = parseFloat(document.getElementById('selectedPlanPrice').value);\n        \n        let finalPrice = planPrice;\n        if (billingPeriod === 'yearly') {\n            finalPrice = planPrice * 12 * 0.8; // 20% discount for yearly\n        }\n\n        // Update price display\n        const priceDisplay = document.getElementById('finalPrice');\n        if (priceDisplay) {\n            priceDisplay.textContent = this.formatCurrency(finalPrice);\n        }\n\n        // Update billing period display\n        const periodDisplay = document.getElementById('billingPeriodDisplay');\n        if (periodDisplay) {\n            periodDisplay.textContent = billingPeriod === 'yearly' ? 'per tahun' : 'per bulan';\n        }\n\n        // Show discount badge for yearly\n        const discountBadge = document.getElementById('discountBadge');\n        if (discountBadge) {\n            if (billingPeriod === 'yearly') {\n                discountBadge.classList.remove('d-none');\n            } else {\n                discountBadge.classList.add('d-none');\n            }\n        }\n    }\n\n    async updatePaymentMethods() {\n        try {\n            const response = await fetch(`/api/payment/methods?provider=${this.currentProvider}`);\n            const result = await response.json();\n\n            if (result.success) {\n                this.renderPaymentMethods(result.data.methods);\n            }\n        } catch (error) {\n            console.error('Error fetching payment methods:', error);\n        }\n    }\n\n    renderPaymentMethods(methods) {\n        const container = document.getElementById('paymentMethodsContainer');\n        if (!container) return;\n\n        const methodsHTML = methods.map(method => {\n            const methodName = this.getPaymentMethodName(method);\n            const methodIcon = this.getPaymentMethodIcon(method);\n            \n            return `\n                <div class=\"col-md-4 mb-3\">\n                    <div class=\"card payment-method-card\" data-method=\"${method}\">\n                        <div class=\"card-body text-center\">\n                            <i class=\"${methodIcon} fa-2x mb-2\"></i>\n                            <h6 class=\"card-title\">${methodName}</h6>\n                        </div>\n                    </div>\n                </div>\n            `;\n        }).join('');\n\n        container.innerHTML = `\n            <div class=\"row\">\n                ${methodsHTML}\n            </div>\n        `;\n\n        // Add click handlers for payment methods\n        container.querySelectorAll('.payment-method-card').forEach(card => {\n            card.addEventListener('click', () => {\n                this.selectPaymentMethod(card);\n            });\n        });\n    }\n\n    selectPaymentMethod(methodCard) {\n        // Remove active class from all method cards\n        document.querySelectorAll('.payment-method-card').forEach(card => {\n            card.classList.remove('active', 'border-primary');\n        });\n\n        // Add active class to selected method\n        methodCard.classList.add('active', 'border-primary');\n\n        // Store selected method\n        this.selectedPaymentMethod = methodCard.dataset.method;\n    }\n\n    async processPayment() {\n        try {\n            this.showLoading(true);\n\n            // Validate form\n            if (!this.validatePaymentForm()) {\n                this.showLoading(false);\n                return;\n            }\n\n            // Prepare payment data\n            const paymentData = this.getPaymentData();\n\n            // Create payment\n            const response = await fetch('/api/payment/subscription', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem('admin_token')}`\n                },\n                body: JSON.stringify(paymentData)\n            });\n\n            const result = await response.json();\n            \n            if (result.success) {\n                this.handlePaymentSuccess(result.data);\n            } else {\n                this.showError(result.message || 'Gagal membuat pembayaran');\n            }\n\n        } catch (error) {\n            console.error('Payment processing error:', error);\n            this.showError('Terjadi kesalahan saat memproses pembayaran');\n        } finally {\n            this.showLoading(false);\n        }\n    }\n\n    validatePaymentForm() {\n        const requiredFields = [\n            'selectedPlanId',\n            'customerFirstName',\n            'customerLastName',\n            'customerEmail',\n            'customerPhone'\n        ];\n\n        let isValid = true;\n        requiredFields.forEach(fieldId => {\n            const field = document.getElementById(fieldId);\n            if (!field || !field.value.trim()) {\n                this.markFieldAsInvalid(field);\n                isValid = false;\n            } else {\n                this.markFieldAsValid(field);\n            }\n        });\n\n        // Validate email\n        const emailField = document.getElementById('customerEmail');\n        if (emailField && !this.isValidEmail(emailField.value)) {\n            this.markFieldAsInvalid(emailField);\n            isValid = false;\n        }\n\n        // Validate phone\n        const phoneField = document.getElementById('customerPhone');\n        if (phoneField && !this.isValidPhone(phoneField.value)) {\n            this.markFieldAsInvalid(phoneField);\n            isValid = false;\n        }\n\n        return isValid;\n    }\n\n    getPaymentData() {\n        const billingPeriod = document.getElementById('billingPeriod')?.checked ? 'yearly' : 'monthly';\n        \n        return {\n            planId: parseInt(document.getElementById('selectedPlanId').value),\n            provider: this.currentProvider,\n            billingPeriod: billingPeriod,\n            customerData: {\n                firstName: document.getElementById('customerFirstName').value,\n                lastName: document.getElementById('customerLastName').value,\n                email: document.getElementById('customerEmail').value,\n                phone: document.getElementById('customerPhone').value,\n                address: document.getElementById('customerAddress')?.value || '',\n                city: document.getElementById('customerCity')?.value || '',\n                postalCode: document.getElementById('customerPostalCode')?.value || ''\n            }\n        };\n    }\n\n    handlePaymentSuccess(paymentData) {\n        // Store payment data for reference\n        this.paymentData = paymentData;\n\n        if (this.currentProvider === 'midtrans') {\n            this.openMidtransPayment(paymentData);\n        } else if (this.currentProvider === 'xendit') {\n            this.openXenditPayment(paymentData);\n        }\n    }\n\n    openMidtransPayment(paymentData) {\n        // Load Midtrans Snap script if not already loaded\n        if (typeof window.snap === 'undefined') {\n            const script = document.createElement('script');\n            script.src = 'https://app.sandbox.midtrans.com/snap/snap.js';\n            script.setAttribute('data-client-key', window.MIDTRANS_CLIENT_KEY || 'your-client-key');\n            script.onload = () => {\n                this.executeMidtransPayment(paymentData);\n            };\n            document.head.appendChild(script);\n        } else {\n            this.executeMidtransPayment(paymentData);\n        }\n    }\n\n    executeMidtransPayment(paymentData) {\n        window.snap.pay(paymentData.paymentToken, {\n            onSuccess: (result) => {\n                console.log('Midtrans payment success:', result);\n                this.handlePaymentCallback('success', result);\n            },\n            onPending: (result) => {\n                console.log('Midtrans payment pending:', result);\n                this.handlePaymentCallback('pending', result);\n            },\n            onError: (result) => {\n                console.log('Midtrans payment error:', result);\n                this.handlePaymentCallback('error', result);\n            },\n            onClose: () => {\n                console.log('Midtrans payment popup closed');\n                this.handlePaymentCallback('closed');\n            }\n        });\n    }\n\n    openXenditPayment(paymentData) {\n        // For Xendit, redirect to the payment URL\n        window.open(paymentData.paymentUrl, '_blank');\n        \n        // Show payment status checker\n        this.showPaymentStatusChecker(paymentData.orderId);\n    }\n\n    showPaymentStatusChecker(orderId) {\n        const modal = document.getElementById('paymentStatusModal');\n        if (modal) {\n            const modalInstance = new bootstrap.Modal(modal);\n            modalInstance.show();\n            \n            // Start checking payment status\n            this.checkPaymentStatus(orderId);\n        }\n    }\n\n    async checkPaymentStatus(orderId) {\n        const maxAttempts = 60; // Check for 10 minutes (60 * 10 seconds)\n        let attempts = 0;\n\n        const checkStatus = async () => {\n            try {\n                const response = await fetch(`/api/payment/status/${orderId}?provider=${this.currentProvider}`, {\n                    headers: {\n                        'Authorization': `Bearer ${localStorage.getItem('admin_token')}`\n                    }\n                });\n                \n                const result = await response.json();\n                \n                if (result.success) {\n                    const status = result.data.status;\n                    \n                    if (status === 'success') {\n                        this.handlePaymentCallback('success', result.data);\n                        return;\n                    } else if (status === 'failed' || status === 'expired') {\n                        this.handlePaymentCallback('error', result.data);\n                        return;\n                    }\n                }\n                \n                attempts++;\n                if (attempts < maxAttempts) {\n                    setTimeout(checkStatus, 10000); // Check every 10 seconds\n                } else {\n                    this.handlePaymentCallback('timeout');\n                }\n                \n            } catch (error) {\n                console.error('Error checking payment status:', error);\n                attempts++;\n                if (attempts < maxAttempts) {\n                    setTimeout(checkStatus, 10000);\n                } else {\n                    this.handlePaymentCallback('error', { error: 'Status check failed' });\n                }\n            }\n        };\n\n        checkStatus();\n    }\n\n    handlePaymentCallback(status, data = null) {\n        switch (status) {\n            case 'success':\n                this.showSuccess('Pembayaran berhasil! Akun Anda akan diaktifkan dalam beberapa menit.');\n                setTimeout(() => {\n                    window.location.href = '/admin/dashboard';\n                }, 3000);\n                break;\n                \n            case 'pending':\n                this.showInfo('Pembayaran sedang diproses. Kami akan memberitahu Anda setelah pembayaran dikonfirmasi.');\n                break;\n                \n            case 'error':\n                this.showError('Pembayaran gagal. Silakan coba lagi atau hubungi customer support.');\n                break;\n                \n            case 'closed':\n                this.showWarning('Jendela pembayaran ditutup. Anda dapat melanjutkan pembayaran kapan saja.');\n                break;\n                \n            case 'timeout':\n                this.showWarning('Waktu pengecekan status habis. Silakan cek status pembayaran secara manual.');\n                break;\n        }\n    }\n\n    // Utility methods\n    formatCurrency(amount) {\n        return new Intl.NumberFormat('id-ID', {\n            style: 'currency',\n            currency: 'IDR',\n            minimumFractionDigits: 0\n        }).format(amount);\n    }\n\n    getPaymentMethodName(method) {\n        const names = {\n            'credit_card': 'Kartu Kredit',\n            'CREDIT_CARD': 'Kartu Kredit',\n            'bank_transfer': 'Transfer Bank',\n            'BANK_TRANSFER': 'Transfer Bank',\n            'bca_va': 'BCA Virtual Account',\n            'BCA': 'BCA',\n            'bni_va': 'BNI Virtual Account',\n            'BNI': 'BNI',\n            'bri_va': 'BRI Virtual Account',\n            'BRI': 'BRI',\n            'mandiri_va': 'Mandiri Virtual Account',\n            'MANDIRI': 'Mandiri',\n            'gopay': 'GoPay',\n            'GOPAY': 'GoPay',\n            'shopeepay': 'ShopeePay',\n            'SHOPEEPAY': 'ShopeePay',\n            'ovo': 'OVO',\n            'OVO': 'OVO',\n            'dana': 'DANA',\n            'DANA': 'DANA',\n            'linkaja': 'LinkAja',\n            'LINKAJA': 'LinkAja',\n            'qris': 'QRIS',\n            'QR_CODE': 'QR Code',\n            'alfamart': 'Alfamart',\n            'ALFAMART': 'Alfamart',\n            'indomaret': 'Indomaret',\n            'INDOMARET': 'Indomaret'\n        };\n        \n        return names[method] || method;\n    }\n\n    getPaymentMethodIcon(method) {\n        const icons = {\n            'credit_card': 'fas fa-credit-card',\n            'CREDIT_CARD': 'fas fa-credit-card',\n            'bank_transfer': 'fas fa-university',\n            'BANK_TRANSFER': 'fas fa-university',\n            'bca_va': 'fas fa-university',\n            'BCA': 'fas fa-university',\n            'bni_va': 'fas fa-university',\n            'BNI': 'fas fa-university',\n            'bri_va': 'fas fa-university',\n            'BRI': 'fas fa-university',\n            'gopay': 'fas fa-mobile-alt',\n            'GOPAY': 'fas fa-mobile-alt',\n            'shopeepay': 'fas fa-mobile-alt',\n            'SHOPEEPAY': 'fas fa-mobile-alt',\n            'ovo': 'fas fa-mobile-alt',\n            'OVO': 'fas fa-mobile-alt',\n            'dana': 'fas fa-mobile-alt',\n            'DANA': 'fas fa-mobile-alt',\n            'qris': 'fas fa-qrcode',\n            'QR_CODE': 'fas fa-qrcode',\n            'alfamart': 'fas fa-store',\n            'ALFAMART': 'fas fa-store',\n            'indomaret': 'fas fa-store',\n            'INDOMARET': 'fas fa-store'\n        };\n        \n        return icons[method] || 'fas fa-credit-card';\n    }\n\n    isValidEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }\n\n    isValidPhone(phone) {\n        const phoneRegex = /^(\\+62|62|0)[0-9]{9,13}$/;\n        return phoneRegex.test(phone.replace(/[\\s-]/g, ''));\n    }\n\n    markFieldAsValid(field) {\n        field.classList.remove('is-invalid');\n        field.classList.add('is-valid');\n    }\n\n    markFieldAsInvalid(field) {\n        field.classList.remove('is-valid');\n        field.classList.add('is-invalid');\n    }\n\n    showLoading(show) {\n        const button = document.getElementById('paymentButton');\n        const spinner = document.getElementById('paymentSpinner');\n        \n        if (button && spinner) {\n            if (show) {\n                button.disabled = true;\n                spinner.classList.remove('d-none');\n                button.querySelector('.btn-text').textContent = 'Memproses...';\n            } else {\n                button.disabled = false;\n                spinner.classList.add('d-none');\n                button.querySelector('.btn-text').textContent = 'Bayar Sekarang';\n            }\n        }\n    }\n\n    showSuccess(message) {\n        this.showAlert('success', message);\n    }\n\n    showError(message) {\n        this.showAlert('danger', message);\n    }\n\n    showWarning(message) {\n        this.showAlert('warning', message);\n    }\n\n    showInfo(message) {\n        this.showAlert('info', message);\n    }\n\n    showAlert(type, message) {\n        const alertContainer = document.getElementById('alertContainer');\n        if (!alertContainer) return;\n\n        const alertHTML = `\n            <div class=\"alert alert-${type} alert-dismissible fade show\" role=\"alert\">\n                ${message}\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n            </div>\n        `;\n        \n        alertContainer.innerHTML = alertHTML;\n        alertContainer.scrollIntoView({ behavior: 'smooth' });\n    }\n}\n\n// Initialize payment manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.paymentManager = new PaymentManager();\n});"
